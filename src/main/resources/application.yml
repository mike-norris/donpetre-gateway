server:
  port: 8080
  shutdown: graceful

spring:
  application:
    name: api-gateway

  profiles:
    active: ${SPRING_PROFILES_ACTIVE:dev}

  # R2DBC Configuration (replaces JPA)
  r2dbc:
    url: r2dbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:donpetre}
    username: ${DB_USERNAME:donpetre}
    password: ${DB_PASSWORD:donpetre_pass}
    pool:
      initial-size: 5
      max-size: 20
      max-idle-time: 30m

  # Flyway for database migrations
  flyway:
    url: jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:donpetre}
    user: ${DB_USERNAME:donpetre}
    password: ${DB_PASSWORD:donpetre_pass}
    baseline-on-migrate: true
    locations: classpath:db/migration

  # Redis Configuration

  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:}
      timeout: 2000ms
      database: 0

  cloud:
    gateway:
      server:
        webflux:
          httpclient:
            connect-timeout: 5000
            response-timeout: 30s

          # Global filters
          default-filters:
            - name: Retry
              args:
                retries: 3
                statuses: BAD_GATEWAY,GATEWAY_TIMEOUT,SERVICE_UNAVAILABLE
                methods: GET,POST,PUT,DELETE

            - name: RequestRateLimiter
              args:
                redis-rate-limiter.replenishRate: 100
                redis-rate-limiter.burstCapacity: 200
                redis-rate-limiter.requestedTokens: 1
                key-resolver: "#{@userKeyResolver}"

          # Route definitions - UPDATED PATHS
          routes:
            - id: knowledge-ingestion-route
              uri: http://${INGESTION_SERVICE_HOST:localhost}:${INGESTION_SERVICE_PORT:8081}
              predicates:
                - Path=/api/ingestion/**
              filters:
                - StripPrefix=2
                - name: CircuitBreaker
                  args:
                    name: knowledge-ingestion
                    fallbackUri: forward:/fallback/knowledge-ingestion

            - id: knowledge-management-items-route
              uri: http://${MANAGEMENT_SERVICE_HOST:localhost}:${MANAGEMENT_SERVICE_PORT:8082}
              predicates:
                - Path=/api/knowledge-items/**
              filters:
                - name: CircuitBreaker
                  args:
                    name: knowledge-management
                    fallbackUri: forward:/fallback/knowledge-management

            - id: knowledge-management-general-route
              uri: http://${MANAGEMENT_SERVICE_HOST:localhost}:${MANAGEMENT_SERVICE_PORT:8082}
              predicates:
                - Path=/api/knowledge/**
              filters:
                - StripPrefix=1
                - RewritePath=/knowledge/?(?<segment>.*), /knowledge-items/$\{segment}
                - name: CircuitBreaker
                  args:
                    name: knowledge-management
                    fallbackUri: forward:/fallback/knowledge-management

            - id: knowledge-management-sources-route
              uri: http://${MANAGEMENT_SERVICE_HOST:localhost}:${MANAGEMENT_SERVICE_PORT:8082}
              predicates:
                - Path=/api/knowledge-sources/**
              filters:
                - name: CircuitBreaker
                  args:
                    name: knowledge-management
                    fallbackUri: forward:/fallback/knowledge-management

            - id: knowledge-management-tags-route
              uri: http://${MANAGEMENT_SERVICE_HOST:localhost}:${MANAGEMENT_SERVICE_PORT:8082}
              predicates:
                - Path=/api/tags/**
              filters:
                - name: CircuitBreaker
                  args:
                    name: knowledge-management
                    fallbackUri: forward:/fallback/knowledge-management

            - id: knowledge-management-users-route
              uri: http://${MANAGEMENT_SERVICE_HOST:localhost}:${MANAGEMENT_SERVICE_PORT:8082}
              predicates:
                - Path=/api/users/**
              filters:
                - name: CircuitBreaker
                  args:
                    name: knowledge-management
                    fallbackUri: forward:/fallback/knowledge-management

            - id: knowledge-management-analytics-route
              uri: http://${MANAGEMENT_SERVICE_HOST:localhost}:${MANAGEMENT_SERVICE_PORT:8082}
              predicates:
                - Path=/api/analytics/**
              filters:
                - name: CircuitBreaker
                  args:
                    name: knowledge-management
                    fallbackUri: forward:/fallback/knowledge-management

            - id: knowledge-management-export-route
              uri: http://${MANAGEMENT_SERVICE_HOST:localhost}:${MANAGEMENT_SERVICE_PORT:8082}
              predicates:
                - Path=/api/export/**,/api/import/**
              filters:
                - name: CircuitBreaker
                  args:
                    name: knowledge-management
                    fallbackUri: forward:/fallback/knowledge-management

            - id: knowledge-management-admin-route
              uri: http://${MANAGEMENT_SERVICE_HOST:localhost}:${MANAGEMENT_SERVICE_PORT:8082}
              predicates:
                - Path=/api/admin/**
              filters:
                - name: CircuitBreaker
                  args:
                    name: knowledge-management
                    fallbackUri: forward:/fallback/knowledge-management

            - id: search-service-route
              uri: http://${SEARCH_SERVICE_HOST:localhost}:${SEARCH_SERVICE_PORT:8083}
              predicates:
                - Path=/api/search/**
              filters:
                - StripPrefix=2
                - name: CircuitBreaker
                  args:
                    name: search-service
                    fallbackUri: forward:/fallback/search-service


# Actuator Configuration
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,gateway
      base-path: /actuator
  endpoint:
    health:
      show-details: when-authorized
      show-components: always
    gateway:
      access: unrestricted

# Logging Configuration
logging:
  level:
    com.openrangelabs.donpetre: DEBUG
    org.springframework.cloud.gateway: ${GATEWAY_LOG_LEVEL:INFO}
    org.springframework.security: DEBUG
    org.springframework.r2dbc: DEBUG
    io.r2dbc: DEBUG
    reactor.netty: ${NETTY_LOG_LEVEL:WARN}
  pattern:
    console: "%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(%5p) %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n"

# Custom Application Configuration
open-range-labs:
  donpetre:
    security:
      jwt:
        secret: ${JWT_SECRET:}
        expiration: 86400000 # 24 hours in milliseconds
        refresh-expiration: 604800000 # 7 days in milliseconds
        algorithm: HS512
        key-length: 64
        auto-generate-secret: false
      cors:
        allowed-origins: ${CORS_ALLOWED_ORIGINS:http://localhost:3000,http://localhost:8080}
        allowed-methods: GET,POST,PUT,DELETE,OPTIONS,PATCH
        allowed-headers: "*"
        allow-credentials: true
        max-age: 3600

---
# Development Profile
spring:
  config:
    activate:
      on-profile: dev

  r2dbc:
    pool:
      initial-size: 2
      max-size: 10

logging:
  level:
    com.openrangelabs.donpetre: DEBUG
    org.springframework.cloud.gateway: DEBUG
    org.springframework.security: DEBUG

open-range-labs:
  donpetre:
    security:
      jwt:
        auto-generate-secret: true  # Allow auto-generation in dev only
      cors:
        allowed-origins: "http://localhost:3000,http://localhost:8080,http://localhost:8084"

---
# Production Profile
spring:
  config:
    activate:
      on-profile: prod

  r2dbc:
    pool:
      initial-size: 10
      max-size: 50

logging:
  level:
    com.openrangelabs.donpetre: INFO
    org.springframework.cloud.gateway: WARN
    org.springframework.security: WARN
    org.springframework.r2dbc: WARN

open-range-labs:
  donpetre:
    security:
      jwt:
        auto-generate-secret: false  # Never auto-generate in production

---
# Docker Profile
spring:
  config:
    activate:
      on-profile: docker

  r2dbc:
    url: r2dbc:postgresql://postgresql:5432/donpetre
    username: ${DB_USERNAME:donpetre}
    password: ${DB_PASSWORD:donpetre_pass}

  flyway:
    url: jdbc:postgresql://postgresql:5432/donpetre
    user: ${DB_USERNAME:donpetre}
    password: ${DB_PASSWORD:donpetre_pass}

  data:
    redis:
      host: redis

open-range-labs:
  donpetre:
    security:
      cors:
        allowed-origins: "http://localhost:3000,http://localhost:8080,http://localhost:8084"

logging:
  level:
    com.openrangelabs.donpetre: INFO