server:
  port: 8080
  shutdown: graceful
  tomcat:
    connection-timeout: 20000
    max-connections: 8192

spring:
  application:
    name: api-gateway

  profiles:
    active: ${SPRING_PROFILES_ACTIVE:dev}

  # Database Configuration
  datasource:
    url: jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:knowledge_platform}
    username: ${DB_USERNAME:knowledge_user}
    password: ${DB_PASSWORD:knowledge_pass}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      idle-timeout: 300000
      max-lifetime: 1200000
      connection-timeout: 20000

  # JPA Configuration
  jpa:
    hibernate:
      ddl-auto: ${DDL_AUTO:validate}
    show-sql: ${SHOW_SQL:false}
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        jdbc:
          batch_size: 20
        order_inserts: true
        order_updates: true

  # Redis Configuration
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:}
      timeout: 2000ms
      database: 0
      lettuce:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 0
          max-wait: -1ms
        shutdown-timeout: 100ms

  # Spring Cloud Gateway Configuration
  cloud:
    gateway:
      httpclient:
        connect-timeout: 5000
        response-timeout: 30s
        pool:
          max-connections: 100
          max-idle-time: 30s

      # Global filters applied to all routes
      default-filters:
        - name: Retry
          args:
            retries: 3
            statuses: BAD_GATEWAY,GATEWAY_TIMEOUT,SERVICE_UNAVAILABLE
            methods: GET,POST,PUT,DELETE
            backoff:
              firstBackoff: 50ms
              maxBackoff: 500ms
              factor: 2
              basedOnPreviousValue: false

        #- name: CircuitBreaker
        #  args:
        #    name: defaultCircuitBreaker
        #    fallbackUri: forward:/fallback
        #    slowCallDurationThreshold: 10s
        #    slowCallRateThreshold: 50
        #    failureRateThreshold: 50
        #    waitDurationInOpenState: 30s

        - name: RequestRateLimiter
          args:
            redis-rate-limiter.replenishRate: ${RATE_LIMIT_REPLENISH:100}
            redis-rate-limiter.burstCapacity: ${RATE_LIMIT_BURST:200}
            redis-rate-limiter.requestedTokens: 1
            key-resolver: "#{@userKeyResolver}"

      # Route definitions
      routes:
        - id: knowledge-ingestion-route
          uri: http://${INGESTION_SERVICE_HOST:localhost}:${INGESTION_SERVICE_PORT:8081}
          predicates:
            - Path=/api/ingestion/**
          filters:
            - StripPrefix=2

        - id: knowledge-management-route
          uri: http://${MANAGEMENT_SERVICE_HOST:localhost}:${MANAGEMENT_SERVICE_PORT:8082}
          predicates:
            - Path=/api/knowledge/**
          filters:
            - StripPrefix=2

        - id: search-service-route
          uri: http://${SEARCH_SERVICE_HOST:localhost}:${SEARCH_SERVICE_PORT:8083}
          predicates:
            - Path=/api/search/**
          filters:
            - StripPrefix=2

        - id: web-ui-route
          uri: http://${WEB_UI_HOST:localhost}:${WEB_UI_PORT:8084}
          predicates:
            - Path=/ui/**
          filters:
            - StripPrefix=1

  # Security Configuration
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${JWT_ISSUER_URI:http://localhost:8080}
          jwk-set-uri: ${JWT_JWK_SET_URI:http://localhost:8080/.well-known/jwks.json}

# Actuator Configuration
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,gateway
      base-path: /actuator
  endpoint:
    health:
      show-details: when-authorized
      show-components: always
    gateway:
      enabled: true
  health:
    circuitbreakers:
      enabled: true
    ratelimiters:
      enabled: true
  metrics:
    export:
      prometheus:
        enabled: true
    distribution:
      percentiles-histogram:
        http.server.requests: true
      percentiles:
        http.server.requests: 0.5, 0.95, 0.99

# Logging Configuration
logging:
  level:
    com.openrangelabs.donpetre: ${LOG_LEVEL:DEBUG}
    org.springframework.cloud.gateway: ${GATEWAY_LOG_LEVEL:INFO}
    org.springframework.security: ${SECURITY_LOG_LEVEL:INFO}
    org.springframework.web.reactive: ${WEB_LOG_LEVEL:INFO}
    io.github.resilience4j: INFO
    reactor.netty: ${NETTY_LOG_LEVEL:WARN}
  pattern:
    console: "%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}"
    file: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"
  file:
    name: ${LOG_FILE_PATH:logs/api-gateway.log}
  logback:
    rollingpolicy:
      max-file-size: 10MB
      max-history: 30

# Custom Application Configuration
open-range-labs:
  donpetre:
    # Security settings
    security:
      jwt:
        secret: ${JWT_SECRET:bXlTZWNyZXRLZXlGb3JKV1RUb2tlbkdlbmVyYXRpb25BbmRWYWxpZGF0aW9u}
        expiration: ${JWT_EXPIRATION:86400000} # 24 hours in milliseconds
        refresh-expiration: ${JWT_REFRESH_EXPIRATION:604800000} # 7 days in milliseconds

      cors:
        allowed-origins: ${CORS_ALLOWED_ORIGINS:http://localhost:3000,http://localhost:8080,http://localhost:8084}
        allowed-methods: ${CORS_ALLOWED_METHODS:GET,POST,PUT,DELETE,OPTIONS,PATCH}
        allowed-headers: ${CORS_ALLOWED_HEADERS:*}
        allow-credentials: ${CORS_ALLOW_CREDENTIALS:true}
        max-age: ${CORS_MAX_AGE:3600}

    # Rate limiting settings
    rate-limiting:
      enabled: ${RATE_LIMITING_ENABLED:true}
      requests-per-minute: ${RATE_LIMIT_PER_MINUTE:100}
      burst-capacity: ${RATE_LIMIT_BURST_CAPACITY:200}

      # Different limits for different user types
      limits:
        anonymous: ${RATE_LIMIT_ANONYMOUS:10}
        user: ${RATE_LIMIT_USER:100}
        admin: ${RATE_LIMIT_ADMIN:1000}

    # Circuit breaker settings
    circuit-breaker:
      failure-rate-threshold: ${CB_FAILURE_RATE:50.0}
      slow-call-rate-threshold: ${CB_SLOW_CALL_RATE:50.0}
      slow-call-duration-threshold: ${CB_SLOW_CALL_DURATION:10s}
      permitted-number-of-calls-in-half-open-state: ${CB_HALF_OPEN_CALLS:10}
      sliding-window-size: ${CB_SLIDING_WINDOW:100}
      minimum-number-of-calls: ${CB_MIN_CALLS:20}
      wait-duration-in-open-state: ${CB_WAIT_DURATION:60s}

    # Service discovery and health checks
    services:
      knowledge-ingestion:
        url: http://${INGESTION_SERVICE_HOST:localhost}:${INGESTION_SERVICE_PORT:8081}
        health-check-path: /actuator/health
        timeout: 5s

      knowledge-management:
        url: http://${MANAGEMENT_SERVICE_HOST:localhost}:${MANAGEMENT_SERVICE_PORT:8082}
        health-check-path: /actuator/health
        timeout: 5s

      search-service:
        url: http://${SEARCH_SERVICE_HOST:localhost}:${SEARCH_SERVICE_PORT:8083}
        health-check-path: /health
        timeout: 10s

      web-ui:
        url: http://${WEB_UI_HOST:localhost}:${WEB_UI_PORT:8084}
        health-check-path: /health
        timeout: 3s

---
# Development Profile
spring:
  config:
    activate:
      on-profile: dev

  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true

  h2:
    console:
      enabled: true

logging:
  level:
    com.openrangelabs.donpetre: DEBUG
    org.springframework.cloud.gateway: DEBUG
    org.springframework.security: DEBUG

open-range-labs:
  donpetre:
    security:
      cors:
        allowed-origins: "*"

---
# Production Profile
spring:
  config:
    activate:
      on-profile: prod

  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false

logging:
  level:
    com.openrangelabs.donpetre: INFO
    org.springframework.cloud.gateway: WARN
    org.springframework.security: WARN
  file:
    name: /app/logs/api-gateway.log

open-range-labs:
  donpetre:
    security:
      cors:
        allowed-origins: ${CORS_ALLOWED_ORIGINS:https://yourdomain.com}

---
# Docker Profile
spring:
  config:
    activate:
      on-profile: docker

  datasource:
    url: jdbc:postgresql://postgresql:5432/knowledge_platform

  data:
    redis:
      host: redis

open-range-labs:
  donpetre:
    services:
      knowledge-ingestion:
        url: http://knowledge-ingestion:8081
      knowledge-management:
        url: http://knowledge-management:8082
      search-service:
        url: http://search-service:8083
      web-ui:
        url: http://web-ui:8084